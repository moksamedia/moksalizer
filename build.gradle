/*
 * NOTES
 * 
 * ORM: 
 *    - Kundera: JPA compliant, easily switch between NoSQL and relational databases, uses SQL-like query langauge (ugh)
 *    - Morphia: mongodb-specific, not actively developed
 *    - Spring Data: heavy, provides decent separation
 *    
 * SECURITY:
 *    - Spring: role-based, XML
 *    - Apache Shiro: INI files
 * 
 */

import org.slf4j.Logger
import org.slf4j.LoggerFactory

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'jetty'

//apply plugin: 'jetty'

// PROJECT VERSION & GROUP
project.version = 0.1
project.group = 'com.moksamedia.moksalizer'

// CAPTURE STANDARD OUTPUT
logging.captureStandardOutput(LogLevel.ERROR)

import org.slf4j.Logger
import org.slf4j.LoggerFactory


Logger log = LoggerFactory.getLogger("build-logger")

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'eu.appsatori:gradle-fatjar-plugin:0.1.2' // adds fatJar task
	}
}

repositories {
	mavenCentral()
	maven {
		url "http://bits.netbeans.org/maven2"
	}
}
	
dependencies {
		
	/* JUNIT */
	testCompile 'junit:junit:4.10'
		
	/* LOGGING */
	compile 'org.slf4j:slf4j-api:1.7.4',
			'ch.qos.logback:logback-classic:1.0.1'  // Logback
			//'org.slf4j:slf4j-log4j12:1.7.4',	    // Log4j
			//'log4j:log4j:1.2.17'		
	
	/* GROOVY */
	groovy 'org.codehaus.groovy:groovy-all:1.8.+'
	
	/* SERVLET API 2.5 */
	compile 'javax.servlet:servlet-api:2.5'
	
	/* JAX-RS (JSR 311) API */
	providedCompile 'javax.ws.rs:jsr311-api:1.1.1'
	
	/* JERSEY */
	compile 'com.sun.jersey:jersey-bundle:1.17'
	
	/* JERSEY GUICE - DEPENDENCY INJECTION */
	compile 'com.sun.jersey.contribs:jersey-guice:1.17'
	
	/* MONGO JAVA DRIVER */
	compile 'org.mongodb:mongo-java-driver:2.10.1'
	
	/* MORPHIA (https://github.com/jmkgreen/morphia) */
	compile 'com.github.jmkgreen.morphia:morphia:1.2.2'
	compile 'com.github.jmkgreen.morphia:morphia-logging-slf4j:1.2.2'
	
	/* GOOGLE DRIVE API */
	compile 'com.google.api-client:google-api-client:1.14.1-beta'
	
	/* HTTP BUILDER */
	compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
	
	/* HTML PARSER */
	compile 'org.htmlparser:htmlparser:1.6'
	
	/* APACHE SHIRO - SECURITY */
	compile 'org.apache.shiro:shiro-all:1.2.1'
	
	/* NETBEANS LOOKUP API - PLUGINS */
	compile 'org.netbeans.api:org-openide-util-lookup:latest.release'
	
}
keystore = file('src/main/resources/jetty-ssl.keystore').getAbsolutePath()

[jettyRun, jettyRunWar]*.configure {
	webAppSourceDirectory = file('static')
	contextPath = '/'
	jettyConfig= file('jetty-web.xml')
}

war {
	webXml = file('web.xml')
	//classpath configurations.compile
}

/*
jar {
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}
*/

